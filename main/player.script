local platypus = require "platypus.platypus"
local input = require "in.state"
local input_mapper = require "in.mapper"
local camera = require "orthographic.camera"

go.property("max_camera_offset", vmath.vector3(300, 500, 0))
go.property("camera_offset_lerp", 0.05)

local LEFT = hash("left")
local RIGHT = hash("right")
local JUMP = hash("jump")
local CAMERA_ID = hash("/camera")

local function play_animation(self, animation)
  if self.current_animation ~= animation then
    msg.post("#sprite", "play_animation", { id = animation })
    self.current_animation = animation
  end
end

function init(self)
  input.acquire()   
  --msg.post('@system:', 'toggle_physics_debug')
  input_mapper.bind(input_mapper.KEY_A, LEFT)
  input_mapper.bind(input_mapper.KEY_D, RIGHT)
  input_mapper.bind(input_mapper.KEY_SPACE, JUMP)
  self.platypus = platypus.create({
    collisions = {
      --separation = platypus.SEPARATION_RAYS,
      separation = platypus.SEPARATION_SHAPES,
      groups = {
        [hash("ground")] = platypus.DIR_ALL,
        [hash("platform")] = platypus.DIR_DOWN,
        [hash("bubble")] = platypus.DIR_DOWN,
      },
      left = 5, right = 5, top = 10, bottom = 15,
    },
    gravity = -500,
    max_velocity = 800,
    allow_double_jump = false,
    allow_wall_jump = true
  })
  self.camera_offset = vmath.vector3()
  self.current_animation = nil
  msg.post("@render:", "clear_color", { color = vmath.vector4(0.008, 0.090, 0.129, 1.0) })
end

function update(self, dt)
  local id = go.get_id()
  camera.follow(CAMERA_ID, id, self.camera_offset_lerp , self.camera_offset)
  local ground_contact = self.platypus.has_ground_contact()
  if input.is_pressed(LEFT) then
    self.platypus.left(ground_contact and 120 or 100)
    play_animation(self, ground_contact and hash("run") or hash("jump"))
    sprite.set_hflip("#sprite", true)
  elseif input.is_pressed(RIGHT) then
    self.platypus.right(ground_contact and 120 or 100)
    play_animation(self, ground_contact and hash("run") or hash("jump"))
    sprite.set_hflip("#sprite", false)
  else
    play_animation(self, ground_contact and hash("idle") or hash("jump"))
  end
  self.platypus.update(dt)
end

function on_message(self, message_id, message, sender)
  self.platypus.on_message(message_id, message, sender)
  if message_id == platypus.GROUND_CONTACT then
    print("Ground contact")
  elseif message_id == platypus.WALL_CONTACT then
    print("Wall contact")
  elseif message_id == platypus.FALLING then
    print("Falling")
  elseif message_id == platypus.WALL_JUMP then
    sprite.set_hflip("#sprite", self.platypus.velocity.x < 0)
  end
end

function on_input(self, action_id, action)
  action_id = input_mapper.on_input(action_id)
  input.on_input(action_id, action)
  if action_id == JUMP then
    if action.pressed then
      self.platypus.jump(300)
    elseif action.released then
      self.platypus.abort_jump()
    end
  end
end

function on_reload(self)
  -- Add reload-handling code here
  -- Remove this function if not needed
end
