local input = require "in.state"
local input_mapper = require "in.mapper"

local PAUSE = hash("pause")

local proxy_loaded = hash("proxy_loaded")
local show = hash("show")

function init(self)
	input.acquire()
	input_mapper.bind(input_mapper.KEY_ESC, PAUSE)
	self.paused = false
	self.pause_node = gui.get_node("pause_menu")
	self.text = gui.get_node("text")
	self.quit = gui.get_node("quit_button")
	gui.set_enabled(self.pause_node, false)
	gui.set_enabled(self.text, false)
	gui.set_enabled(self.quit, false)
end

function on_message(self, message_id, message, sender)
	if message_id == proxy_loaded then
		msg.post(sender, "enable")
	elseif message_id == show then
		if self.paused then 
			gui.set_enabled(self.pause_node, true)
			gui.set_enabled(self.text, true)
			gui.set_enabled(self.quit, true)
		else
			gui.set_enabled(self.pause_node, false)
			gui.set_enabled(self.text, false)
			gui.set_enabled(self.quit, false)
		end
	end 
end

function final(self)
	input.release()
end

local shared = require("main.shared")

function on_input(self, action_id, action)
	action_id = input_mapper.on_input(action_id)
	input.on_input(action_id, action)
	if action_id == PAUSE and action.released then
		self.paused = not self.paused
		if self.paused then
			msg.post("#level_"..shared.level.next..'_'..shared.level.dif, "set_time_step", {factor = 0, mode = 1})
		else
			msg.post("#level_"..shared.level.next..'_'..shared.level.dif, "set_time_step", {factor = 1, mode = 1})
		end
	elseif self.paused and  gui.pick_node(self.quit, action.x, action.y) then 
		msg.post("@system:", 'exit', { code = 0 })
	end
	return true
end