local platypus = require "platypus.platypus"
local input = require "in.state"
local input_mapper = require "in.mapper"
local shared = require "main.shared"

local LEFT = hash("left")
local RIGHT = hash("right")
local JUMP = hash("jump")
local PAUSE = hash("pause")

local function play_animation(self, animation)
    if self.current_animation ~= animation then
        msg.post("#sprite", "play_animation", { id = animation })
        self.current_animation = animation
    end
end

function init(self)
    input.acquire()   
    --msg.post('@system:', 'toggle_physics_debug')
    input_mapper.bind(input_mapper.KEY_A, LEFT)
    input_mapper.bind(input_mapper.KEY_D, RIGHT)
    input_mapper.bind(input_mapper.KEY_SPACE, JUMP)
    input_mapper.bind(input_mapper.KEY_ESC, PAUSE)
    self.platypus = platypus.create({
        collisions = {
            separation = platypus.SEPARATION_RAYS,
            --separation = platypus.SEPARATION_SHAPES,
            groups = {
                [hash("ground")] = platypus.DIR_ALL,
                [hash("platform")] = platypus.DIR_DOWN,
                [hash("bubble")] = platypus.DIR_DOWN,
            },
            left = 9, right = 9, top = 10, bottom = 15,
        },
        gravity = -500,
        max_velocity = 800,
        allow_double_jump = false,
        allow_wall_jump = true
    })

    self.current_animation = nil
    self.start_pos = go.get_position()
    msg.post("@render:", "clear_color", { color = vmath.vector4(95 /256, 129 / 256, 161 / 256, 1 ) })
end

function update(self, dt)
    local ground_contact = self.platypus.has_ground_contact()
    local current_pos  = go.get_position()
    if current_pos.y < -150 then
        msg.post('controller:/controller#controller', 'show_game_over')
    end
    if input.is_pressed(LEFT) then
        self.platypus.left(ground_contact and 120 or 100)
        play_animation(self, ground_contact and hash("run") or hash("jump"))
        sprite.set_hflip("#sprite", true)
    elseif input.is_pressed(RIGHT) then
        self.platypus.right(ground_contact and 120 or 100)
        play_animation(self, ground_contact and hash("run") or hash("jump"))
        sprite.set_hflip("#sprite", false)
    else
        play_animation(self, ground_contact and hash("idle") or hash("jump"))
    end
    self.platypus.update(dt)
end

local function change_level(self, npc)
    if npc == hash('/old_man') then
        shared.level.next = 2
        shared.level.previous = 1
        shared.level.dif = 'hard'
        shared.level.cur = 'easy'
        msg.post("controller:/controller#controller", "next_level" )
    elseif npc == hash('/girl') then
        shared.level.next = 2
        shared.level.previous = 1
        shared.level.dif = 'easy'
        shared.level.cur = 'easy'
        msg.post("controller:/controller#controller", "next_level" )
    elseif npc == hash('/old_woman') then
        msg.post("controller:/controller#controller", "ending_e" )
    elseif npc == hash('/baby') then 
        msg.post("controller:/controller#controller", "ending_h" )
    end
end

function on_message(self, message_id, message, sender)
    self.platypus.on_message(message_id, message, sender)
    if message_id == platypus.GROUND_CONTACT then
        print("Ground contact")
    elseif message_id == platypus.WALL_CONTACT then
        print("Wall contact")
    elseif message_id == platypus.FALLING then
        print("Falling")
    elseif message_id == platypus.WALL_JUMP then
        sprite.set_hflip("#sprite", self.platypus.velocity.x < 0)
    elseif message_id == hash("trigger_response") then 
        if message.enter then
            change_level(self, message.other_id)
        end
    end
end

function on_input(self, action_id, action)
    action_id = input_mapper.on_input(action_id)
    input.on_input(action_id, action)
    if action_id == JUMP then
        if action.pressed then
            msg.post("#jump", "play_sound")
            self.platypus.jump(300)
        elseif action.released then
            self.platypus.abort_jump()
        end
    elseif action_id == PAUSE then
        if action.released then
            msg.post("controller:/controller#pause_menu", "show")
        end
    end
end